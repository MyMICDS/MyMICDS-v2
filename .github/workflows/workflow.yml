name: MyMICDS CI Azure

on:
  push:
    branches: ['master', 'azure']
    # Publish semver tags as releases.
    tags: ['v*.*.*']
  pull_request:
    branches: ['master']

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19
        with:
          cosign-release: 'v2.1.1'

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,format=long,priority=2000
            type=sha,priority=1500
            type=raw,value=latest,enable={{is_default_branch}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # Output Docker image URL
      - name: Output Docker image URL
        run: |
          echo "${{ steps.build-and-push.outputs.metadata }}"
          echo "${{ fromJSON(steps.build-and-push.outputs.metadata)['image.name'] }}"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Just get first tag"
          echo "${{ steps.meta.outputs.tags }}" | head -n 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      ResourceGroupName: mymicds-v2-prod
      ResourceGroupLocation: 'centralus'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Ensure the resource group exists
      #   - uses: Azure/CLI@v1
      #     with:
      #       inlineScript: |
      #         #!/bin/bash
      #         az group create --name ${{ env.ResourceGroupName }} --location ${{ env.ResourceGroupLocation }}
      #         echo "Azure resource group created"

      - uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: ${{ env.ResourceGroupName }}
          template: ./azuredeploy.bicep
          parameters: resourceNamePrefix=mymicdstwest3 emailUri=${{ secrets.EMAIL_URI }} jwtSecret=${{ secrets.JWT_SECRET }} openWeatherApiKey=${{ secrets.OPEN_WEATHER_API_KEY }} portalDayRotation=${{ secrets.PORTAL_DAY_ROTATION }} googleServiceAccount=${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          # Because warnings will make this part fail otherwise
          failOnStdErr: false
